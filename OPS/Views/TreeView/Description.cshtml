@using OnlinePriceSystem.Controllers
@using QuoteTree
@{
    var Model = (ANode)TempData["node"]!;
    var url = (string)TempData["url"]!;
    var dependentsVisibility = (string)TempData["dependentsVisibility"]!;
    var referencesVisibility = (string)TempData["referencesVisibility"]!;
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta HTTP-EQUIV="CACHE-CONTROL" CONTENT="NO-CACHE">
    <meta HTTP-EQUIV="PRAGMA" CONTENT="NO-CACHE">
    <title>Description</title>
    <script src="../js/jquery-3.7.1.min.js"></script>
    <script src="../js/iframesize.js"></script>
    <script src="../js/jquery.easeScroll.js"></script>

    <style>
        /* Light mode */
        @@media (prefers-color-scheme: light) {
            body {
                background-color: white;
                color: black;
                font-family: Arial, Helvetica, sans-serif;
                font-size: .85em;
            }
    
            li { background: FloralWhite; }
            li:nth-child(odd) { background: PowderBlue; }
        }

        /* Dark mode */
        @@media (prefers-color-scheme: dark) {
            body {
                background-color: black;
                color: white;
                font-family: Arial, Helvetica, sans-serif;
                font-size: .85em;
            }
        
            li { background: dimgray; }
            li:nth-child(odd) { background: gray; }
        }


                /* width */
        /*Custom scrollbar*/
        ::-webkit-scrollbar {
        width: 7px;
        }

        /* Track */
        ::-webkit-scrollbar-track {
        background: #f1f1f1; 
        }
        
        /* Handle */
        ::-webkit-scrollbar-thumb {
        background: #888; 
        }

        /* Handle on hover */
        ::-webkit-scrollbar-thumb:hover {
        background: #555; 
        }
    </style>
</head>
<body>
    <div style="text-align:center">
    @{
        string s = Model.Parent!=null? Model.Parent.Name + " > " + Model.Name : Model.Name;
    }
    <span style="color:red; font-style:italic">@s</span>
    <br />
    <br />
        @if (Model.Disabled){ 
    <label style="color:red">*Disabled* &nbsp;</label> <label style="font-size:small"> @Model.DisabledMessage</label>
    <br />
    } 
    @using (Html.BeginForm("ChangeTreeValue", "TreeView", FormMethod.Get, new { id = "formID" }))
        {
        <div style="text-align:center">
            @{bool show_button = true; decimal output;}
            <table style="text-align:right; margin: auto">
                @if (Model.EditChildren){ 
                    @foreach(ANode node in Model.Children!){ 
                        @if (!node.BranchHidden() && node.Type == NodeType.Math && Decimal.TryParse((node as MathNode)!.Expression, out output))
                        { 
                            <tr>
                                <td>@node.Name</td>
                                <td>@Html.TextBox("NodeValue" + node.Id, "")</td>
                                <td style="white-space:nowrap;"> @Html.Label("", "[" + node.Min.ToString() + ", " + node.Max.ToString() + "]")</td>
                            </tr>     
                        }  
                        else show_button = false;    
                    } 
                    @if (show_button) { 
                            <tr>
                                <td></td>
                                <td><input type="button" class="input" onclick="get()" value="Save" /></td>
                            </tr>
                        }   
                }
                
            </table>
        </div>
        }

        <br />

    </div>

    <div>
		@{
            url = url.Replace("http:///","file:///");
        } 
		
        <iframe scrolling="no" style="width: 100%; border-width: 0px" id="Iframe2" src='@Url.Action("GetHtml","TreeView")'></iframe>    
    </div>
    <br />
    <div id="deps" style="display: none;">
        <label id="depArrow" onclick="$('#dependents').toggle(); toggleArrowDependents();" style="color:blue; cursor: pointer;">DEPENDENTS ⬇️</label>
        <ol class="list_dependents" id="dependents">
           @foreach (string dependent in Model.Dependents!) {
            ANode dep = Model.ParentTree.GetNodeFromId(dependent)!;
            String href = dep.Url.Contains("ChangeTreeValue")? Url.Content("~/" + dep.Url):"Description?id=" + dep.Id;
            <li>
                <a title="@dep.GetPath()" onclick="OpenNode('@dep.GetPath().Replace("\\",">")'); UnHideBranch('@dep.Id');" href="@href">@dep.Name</a><label style="color: black; font-size:small" > (@dep.GetPath()) </label>
                </li>
            }  
        </ol>
        <br />
    </div>
     <div id="refs" style="display: none;">
        <label id="refArrow" onclick="$('#references').toggle(); toggleArrowReferences();" style="color:blue; cursor: pointer;">REFERENCES ⬇️</label>
        <ol class="list_references" id="references">
            @foreach (string reference in Model.References!) {
            ANode refe = Model.ParentTree.GetNodeFromId(reference)!;
            String href = refe.Url.Contains("ChangeTreeValue")? Url.Content("~/" + refe.Url):"Description?id=" + refe.Id;
            <li>
                <a title="@refe.GetPath()" onclick="OpenNode('@refe.GetPath().Replace("\\",">")'); UnHideBranch('@refe.Id');" href="@href">@refe.Name</a><label style="color: black; font-size:small" > (@refe.GetPath()) </label>
            </li>
            } 
        </ol>
        <br />
        <br />
    </div>
    <script>
        $(function () {
            $(".list_dependents li").sort(asc_sort).appendTo('.list_dependents');
            $(".list_references li").sort(asc_sort).appendTo('.list_references');
            //$("#dependents").hide();
            //$("#references").hide();
            $('#formID').keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                    $('.input').click();
                }
            });
        });

        function toggleArrowDependents(){
            if ($("#depArrow").text() == "DEPENDENTS ⬇️") {
                    $("#depArrow").text("DEPENDENTS ➡️");
                    $.ajax({
                        url: "SetDepVisibility?visibility=" + "hidden",
                        type: 'GET',
                        dataType: "text",
                        cache: false,
                        beforeSend: function () {
                        },
                        complete: function () {
                        },
                        success: function (result) {
                        }
                    });   //end ajax
                }
            else {
                    $("#depArrow").text("DEPENDENTS ⬇️");
                    $.ajax({
                        url: "SetDepVisibility?visibility=" + "visible",
                        type: 'GET',
                        dataType: "text",
                        cache: false,
                        beforeSend: function () {
                        },
                        complete: function () {
                        },
                        success: function (result) {
                        }
                    });   //end ajax
                }
        }

        function toggleArrowReferences(){
            if ($("#refArrow").text() == "REFERENCES ⬇️") {
                $("#refArrow").text("REFERENCES ➡️")
                $.ajax({
                        url: "SetRefVisibility?visibility=" + "hidden",
                        type: 'GET',
                        dataType: "text",
                        cache: false,
                        beforeSend: function () {
                        },
                        complete: function () {
                        },
                        success: function (result) {
                        }
                    });   //end ajax
            }
            else {
                $("#refArrow").text("REFERENCES ⬇️");
                $.ajax({
                        url: "SetRefVisibility?visibility=" + "visible",
                        type: 'GET',
                        dataType: "text",
                        cache: false,
                        beforeSend: function () {
                        },
                        complete: function () {
                        },
                        success: function (result) {
                        }
                    });   //end ajax
            }
        }

        function get() {
            //Post values to server
            var data = $('#formID').serialize();
            //$.get('CommitTreeValue', data);

            //Get total price
            $.ajax({
                url: "CommitTreeValue",
                type: 'GET',
                data: data,
                cache: false,
                beforeSend: function () {
                },
                complete: function () {
                    top.dialog.dialog("close");
                },
                success: function (result) {
                    //Update the price in the page
                    top.asynchronous = false;
                    price = window.parent.document.getElementById("price");
                    $(price).text("Total: " + result);
                    if ($("input[id='editchildren_@Model.Id']", parent.document).attr("value") == "true") {
                        //Open the node
                        parent.$.jstree._reference("li[id='li_@Model.Id']").open_node("li[id='li_@Model.Id']");
                        //var array = [];
                        var children = $("li[id='li_@Model.Id']", parent.document).children('ul').children('li');
                        var merged = "";
                        for (var i = 0; i < children.length; i++) {
                            var childID = children[i].id.replace(/li_/g, "");
                            //Merge dependents and branch nodes then update
                            var dependents = ";" + $("input[id='dependents_" + childID + "']", parent.document).attr("value");
                            var branch = parent.GetBranch(childID);
                            var branchArray = branch.split(";");
                            for (var j = 0; j < branchArray.length; j++) {
                                if (dependents.indexOf(";" + branchArray[j] + ";") == -1) dependents = dependents + ";" + branchArray[j];
                            }

                            //get not optional descendents, this is to update the complete/incomplete images.
                            //if ($("input[id='nodetype_" + parentliID.replace(/li_/g, "") + "']").attr("value") != "Decision") {
                            var descendents = $("li[id='" + childID + "']", parent.document).find("li");
                            for (var k = 0; k < descendents.length; k++) {
                                dependents += ";" + descendents[k].id.replace(/li_/g, "");
                            }
                            //}

                            //parent.UpdateNodesFromServer(dependents);
                            //merge each child depentents into a single list
                            var dependentsArray = dependents.split(";");
                            for (var l = 0; l < dependentsArray.length; l++) {
                                if (merged.indexOf(";" + dependentsArray[l] + ";") == -1) merged = merged + ";" + dependentsArray[l];
                            }
                        }
                        parent.UpdateNodesFromServer(merged);
                        //parent.UpdateDependents(array);
                    }
                    else {
                        //parent.UpdateDependents('@Model.Id');
                        //This will updated current node and dependents
                        //UpdateDependents(parentliIDclean);
                        //Merge dependents and branch nodes then update
                        var dependents = ";" + $("input[id='dependents_" + "@Model.Id" + "']", parent.document).attr("value");
                        var branch = parent.GetBranch("@Model.Id");
                        var branchArray = branch.split(";");
                        for (var i = 0; i < branchArray.length; i++) {
                            if (dependents.indexOf(";" + branchArray[i] + ";") == -1) dependents = dependents + ";" + branchArray[i];
                        }

                        //get not optional descendents, this is to update the complete/incomplete images.
                        //if ($("input[id='nodetype_" + parentliID.replace(/li_/g, "") + "']").attr("value") != "Decision") {
                        var descendents = $("li[id='" + "@Model.Id" + "']", parent.document).find("li");
                        for (var i = 0; i < descendents.length; i++) {
                            dependents += ";" + descendents[i].id.replace(/li_/g, "");
                        }
                        //}

                        parent.UpdateNodesFromServer(dependents);
                    }
                    top.asynchronous = true;
                    //Redirect to QuoteDetails to show the complete price quote **!! if I do this the recursive javascript is halted and the tree is not correctly updated
                    //window.location = "QuoteDetails";
                },
                error: function (result) {
                    alert("Error updating price from server!");
                }
            });   //end ajax
            //while (parent.$.active != 0) { }
        }

        // accending sort
        function asc_sort(a, b) {
            return ($(b).text()) < ($(a).text()) ? 1 : -1;
        }

        // decending sort
        function dec_sort(a, b) {
            return ($(b).text()) > ($(a).text()) ? 1 : -1;
        }

        //Receives a node's full path and opens the node
        function OpenNode(node) {
            var split = node.split('>');
            var current = "li[id='li_1']";
            for (var i = 0; i < split.length; i++) {
                //1:Open the node
                top.asynchronous = false;
                parent.$.jstree._reference(current).open_node(current, function () {

                    if (i == split.length - 1) {
                        parent.$.jstree._reference("li[id='li_@Model.Id']").deselect_node("li[id='li_@Model.Id']");
                        parent.$.jstree._reference(current).select_node(current);
                        $('html', parent.document).scrollTop($(current, parent.document).offset().top);
                    }
                    else {
                        //2:Get next node
                        var children = $(current, parent.document).children('ul').children('li');
                        for (var j = 0; j < children.length; j++) {
                            if ($(children[j]).children('a').children('span:first').text() == split[i + 1]) {
                                current = "li[id='" + $(children[j]).attr('id') + "']";
                                break;
                            }
                        }
                    }
                });               
            }
            top.asynchronous = true;
        }

        function UnHideBranch(id) {
            $("li[id='li_" + id + "']", parent.document).show();
            parent.RefreshFillers(id,false);
            var parentulID = $("li[id='li_" + id + "']", parent.document).parent().attr("id");
            //Recursive call
            if ($("li[id='li_" + id + "']", parent.document).parent().parent().attr("id") != "container")
                UnHideBranch(parentulID.replace(/li_ul_/g, ""));
        }

        $( document ).ready(function() {
    	var title = parent.document.title;
        if(!title.startsWith("New Quote")){
            $("#deps").show();
            $("#refs").show();

            if($("#dependents").css('visibility') != '@dependentsVisibility'){
                $('#dependents').toggle(); 
                toggleArrowDependents();
            }

            if($("#references").css('visibility') != '@referencesVisibility'){
                $('#references').toggle(); 
                toggleArrowReferences();
            }

        }
	});

    let platform = navigator.platform.toLowerCase();
    if (platform.includes('linux')){
        $("html").easeScroll();

        $("html").easeScroll({
            frameRate: 60,
            animationTime: 1000,
            stepSize: 120,
            pulseAlgorithm: 1,
            pulseScale: 8,
            pulseNormalize: 1,
            accelerationDelta: 20,
            accelerationMax: 1,
            keyboardSupport: true,
            arrowScroll: 50,
            touchpadSupport: true,
            fixedBackground: true
        });
    }
    </script>
</body>
</html>
