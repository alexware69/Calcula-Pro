//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g 2019-04-06 11:08:49

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class NCalcLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int DIGIT=4;
	public const int E=5;
	public const int EscapeSequence=6;
	public const int FALSE=7;
	public const int FLOAT=8;
	public const int HexDigit=9;
	public const int ID=10;
	public const int INTEGER=11;
	public const int LETTER=12;
	public const int NAME=13;
	public const int STRING=14;
	public const int TRUE=15;
	public const int UnicodeEscape=16;
	public const int WS=17;

	// delegates
	// delegators

	public NCalcLexer()
	{
		OnCreated();
	}

	public NCalcLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public NCalcLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__18();
	partial void LeaveRule_T__18();

	// $ANTLR start "T__18"
	[GrammarRule("T__18")]
	private void mT__18()
	{
		EnterRule_T__18();
		EnterRule("T__18", 1);
		TraceIn("T__18", 1);
		try
		{
			int _type = T__18;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:7:7: ( '!' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:7:9: '!'
			{
			DebugLocation(7, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__18", 1);
			LeaveRule("T__18", 1);
			LeaveRule_T__18();
		}
	}
	// $ANTLR end "T__18"

	partial void EnterRule_T__19();
	partial void LeaveRule_T__19();

	// $ANTLR start "T__19"
	[GrammarRule("T__19")]
	private void mT__19()
	{
		EnterRule_T__19();
		EnterRule("T__19", 2);
		TraceIn("T__19", 2);
		try
		{
			int _type = T__19;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:8:7: ( '!=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:8:9: '!='
			{
			DebugLocation(8, 9);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__19", 2);
			LeaveRule("T__19", 2);
			LeaveRule_T__19();
		}
	}
	// $ANTLR end "T__19"

	partial void EnterRule_T__20();
	partial void LeaveRule_T__20();

	// $ANTLR start "T__20"
	[GrammarRule("T__20")]
	private void mT__20()
	{
		EnterRule_T__20();
		EnterRule("T__20", 3);
		TraceIn("T__20", 3);
		try
		{
			int _type = T__20;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:9:7: ( '%' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:9:9: '%'
			{
			DebugLocation(9, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__20", 3);
			LeaveRule("T__20", 3);
			LeaveRule_T__20();
		}
	}
	// $ANTLR end "T__20"

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 4);
		TraceIn("T__21", 4);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:10:7: ( '&&' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:10:9: '&&'
			{
			DebugLocation(10, 9);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 4);
			LeaveRule("T__21", 4);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 5);
		TraceIn("T__22", 5);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:11:7: ( '&' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:11:9: '&'
			{
			DebugLocation(11, 9);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 5);
			LeaveRule("T__22", 5);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 6);
		TraceIn("T__23", 6);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:12:7: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:12:9: '('
			{
			DebugLocation(12, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 6);
			LeaveRule("T__23", 6);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 7);
		TraceIn("T__24", 7);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:13:7: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:13:9: ')'
			{
			DebugLocation(13, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 7);
			LeaveRule("T__24", 7);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 8);
		TraceIn("T__25", 8);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:14:7: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:14:9: '*'
			{
			DebugLocation(14, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 8);
			LeaveRule("T__25", 8);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 9);
		TraceIn("T__26", 9);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:15:7: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:15:9: '+'
			{
			DebugLocation(15, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 9);
			LeaveRule("T__26", 9);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 10);
		TraceIn("T__27", 10);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:16:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:16:9: '-'
			{
			DebugLocation(16, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 10);
			LeaveRule("T__27", 10);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 11);
		TraceIn("T__28", 11);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:17:7: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:17:9: '/'
			{
			DebugLocation(17, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 11);
			LeaveRule("T__28", 11);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 12);
		TraceIn("T__29", 12);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:18:7: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:18:9: ':'
			{
			DebugLocation(18, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 12);
			LeaveRule("T__29", 12);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 13);
		TraceIn("T__30", 13);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:19:7: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:19:9: ';'
			{
			DebugLocation(19, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 13);
			LeaveRule("T__30", 13);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 14);
		TraceIn("T__31", 14);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:20:7: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:20:9: '<'
			{
			DebugLocation(20, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 14);
			LeaveRule("T__31", 14);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 15);
		TraceIn("T__32", 15);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:21:7: ( '<<' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:21:9: '<<'
			{
			DebugLocation(21, 9);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 15);
			LeaveRule("T__32", 15);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 16);
		TraceIn("T__33", 16);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:22:7: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:22:9: '<='
			{
			DebugLocation(22, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 16);
			LeaveRule("T__33", 16);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 17);
		TraceIn("T__34", 17);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:23:7: ( '<>' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:23:9: '<>'
			{
			DebugLocation(23, 9);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 17);
			LeaveRule("T__34", 17);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 18);
		TraceIn("T__35", 18);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:24:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:24:9: '='
			{
			DebugLocation(24, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 18);
			LeaveRule("T__35", 18);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 19);
		TraceIn("T__36", 19);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:25:7: ( '==' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:25:9: '=='
			{
			DebugLocation(25, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 19);
			LeaveRule("T__36", 19);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 20);
		TraceIn("T__37", 20);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:26:7: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:26:9: '>'
			{
			DebugLocation(26, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 20);
			LeaveRule("T__37", 20);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 21);
		TraceIn("T__38", 21);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:27:7: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:27:9: '>='
			{
			DebugLocation(27, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 21);
			LeaveRule("T__38", 21);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 22);
		TraceIn("T__39", 22);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:28:7: ( '>>' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:28:9: '>>'
			{
			DebugLocation(28, 9);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 22);
			LeaveRule("T__39", 22);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 23);
		TraceIn("T__40", 23);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:29:7: ( '?' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:29:9: '?'
			{
			DebugLocation(29, 9);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 23);
			LeaveRule("T__40", 23);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 24);
		TraceIn("T__41", 24);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:30:7: ( '^' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:30:9: '^'
			{
			DebugLocation(30, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 24);
			LeaveRule("T__41", 24);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 25);
		TraceIn("T__42", 25);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:31:7: ( 'and' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:31:9: 'and'
			{
			DebugLocation(31, 9);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 25);
			LeaveRule("T__42", 25);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 26);
		TraceIn("T__43", 26);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:32:7: ( 'not' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:32:9: 'not'
			{
			DebugLocation(32, 9);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 26);
			LeaveRule("T__43", 26);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 27);
		TraceIn("T__44", 27);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:33:7: ( 'or' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:33:9: 'or'
			{
			DebugLocation(33, 9);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 27);
			LeaveRule("T__44", 27);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 28);
		TraceIn("T__45", 28);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:34:7: ( '|' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:34:9: '|'
			{
			DebugLocation(34, 9);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 28);
			LeaveRule("T__45", 28);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 29);
		TraceIn("T__46", 29);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:35:7: ( '||' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:35:9: '||'
			{
			DebugLocation(35, 9);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 29);
			LeaveRule("T__46", 29);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 30);
		TraceIn("T__47", 30);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:36:7: ( '~' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:36:9: '~'
			{
			DebugLocation(36, 9);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 30);
			LeaveRule("T__47", 30);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 31);
		TraceIn("TRUE", 31);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:236:2: ( 'true' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:236:4: 'true'
			{
			DebugLocation(236, 4);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 31);
			LeaveRule("TRUE", 31);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 32);
		TraceIn("FALSE", 32);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:240:2: ( 'false' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:240:4: 'false'
			{
			DebugLocation(240, 4);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 32);
			LeaveRule("FALSE", 32);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 33);
		TraceIn("ID", 33);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:2: ( ( DIGIT )* LETTER ( ( ' ' LETTER | LETTER ) | ( ' ' DIGIT | DIGIT ) | '.' | ' .' | '\\\\' | ',' | ' ,' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:5: ( DIGIT )* LETTER ( ( ' ' LETTER | LETTER ) | ( ' ' DIGIT | DIGIT ) | '.' | ' .' | '\\\\' | ',' | ' ,' )*
			{
			DebugLocation(244, 5);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:5: ( DIGIT )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
					{
					DebugLocation(244, 5);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(244, 12);
			mLETTER(); 
			DebugLocation(244, 19);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:19: ( ( ' ' LETTER | LETTER ) | ( ' ' DIGIT | DIGIT ) | '.' | ' .' | '\\\\' | ',' | ' ,' )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=8;
				try { DebugEnterDecision(4, false);
				switch (input.LA(1))
				{
				case ' ':
					{
					switch (input.LA(2))
					{
					case '.':
						{
						alt4 = 4;
						}
						break;
					case ',':
						{
						alt4 = 7;
						}
						break;
					case '#':
					case 'A':
					case 'B':
					case 'C':
					case 'D':
					case 'E':
					case 'F':
					case 'G':
					case 'H':
					case 'I':
					case 'J':
					case 'K':
					case 'L':
					case 'M':
					case 'N':
					case 'O':
					case 'P':
					case 'Q':
					case 'R':
					case 'S':
					case 'T':
					case 'U':
					case 'V':
					case 'W':
					case 'X':
					case 'Y':
					case 'Z':
					case '_':
					case 'a':
					case 'b':
					case 'c':
					case 'd':
					case 'e':
					case 'f':
					case 'g':
					case 'h':
					case 'i':
					case 'j':
					case 'k':
					case 'l':
					case 'm':
					case 'n':
					case 'o':
					case 'p':
					case 'q':
					case 'r':
					case 's':
					case 't':
					case 'u':
					case 'v':
					case 'w':
					case 'x':
					case 'y':
					case 'z':
					case '{':
					case '}':
						{
						alt4 = 1;
						}
						break;
					case '0':
					case '1':
					case '2':
					case '3':
					case '4':
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
						{
						alt4 = 2;
						}
						break;
					}

					}
					break;
				case '#':
				case 'A':
				case 'B':
				case 'C':
				case 'D':
				case 'E':
				case 'F':
				case 'G':
				case 'H':
				case 'I':
				case 'J':
				case 'K':
				case 'L':
				case 'M':
				case 'N':
				case 'O':
				case 'P':
				case 'Q':
				case 'R':
				case 'S':
				case 'T':
				case 'U':
				case 'V':
				case 'W':
				case 'X':
				case 'Y':
				case 'Z':
				case '_':
				case 'a':
				case 'b':
				case 'c':
				case 'd':
				case 'e':
				case 'f':
				case 'g':
				case 'h':
				case 'i':
				case 'j':
				case 'k':
				case 'l':
				case 'm':
				case 'n':
				case 'o':
				case 'p':
				case 'q':
				case 'r':
				case 's':
				case 't':
				case 'u':
				case 'v':
				case 'w':
				case 'x':
				case 'y':
				case 'z':
				case '{':
				case '}':
					{
					alt4 = 1;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					{
					alt4 = 2;
					}
					break;
				case '.':
					{
					alt4 = 3;
					}
					break;
				case '\\':
					{
					alt4 = 5;
					}
					break;
				case ',':
					{
					alt4 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:20: ( ' ' LETTER | LETTER )
					{
					DebugLocation(244, 20);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:20: ( ' ' LETTER | LETTER )
					int alt2=2;
					try { DebugEnterSubRule(2);
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if ((LA2_1==' '))
					{
						alt2 = 1;
					}
					else if ((LA2_1=='#'||(LA2_1>='A' && LA2_1<='Z')||LA2_1=='_'||(LA2_1>='a' && LA2_1<='{')||LA2_1=='}'))
					{
						alt2 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:21: ' ' LETTER
						{
						DebugLocation(244, 21);
						Match(' '); 
						DebugLocation(244, 25);
						mLETTER(); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:34: LETTER
						{
						DebugLocation(244, 34);
						mLETTER(); 

						}
						break;

					}
					} finally { DebugExitSubRule(2); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:44: ( ' ' DIGIT | DIGIT )
					{
					DebugLocation(244, 44);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:44: ( ' ' DIGIT | DIGIT )
					int alt3=2;
					try { DebugEnterSubRule(3);
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if ((LA3_1==' '))
					{
						alt3 = 1;
					}
					else if (((LA3_1>='0' && LA3_1<='9')))
					{
						alt3 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:45: ' ' DIGIT
						{
						DebugLocation(244, 45);
						Match(' '); 
						DebugLocation(244, 49);
						mDIGIT(); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:57: DIGIT
						{
						DebugLocation(244, 57);
						mDIGIT(); 

						}
						break;

					}
					} finally { DebugExitSubRule(3); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:66: '.'
					{
					DebugLocation(244, 66);
					Match('.'); 

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:72: ' .'
					{
					DebugLocation(244, 72);
					Match(" ."); 


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:79: '\\\\'
					{
					DebugLocation(244, 79);
					Match('\\'); 

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:86: ','
					{
					DebugLocation(244, 86);
					Match(','); 

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:244:92: ' ,'
					{
					DebugLocation(244, 92);
					Match(" ,"); 


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 33);
			LeaveRule("ID", 33);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 34);
		TraceIn("INTEGER", 34);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:248:2: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:248:4: ( DIGIT )+
			{
			DebugLocation(248, 4);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:248:4: ( DIGIT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if (((LA5_1>='0' && LA5_1<='9')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
					{
					DebugLocation(248, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 34);
			LeaveRule("INTEGER", 34);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 35);
		TraceIn("FLOAT", 35);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:252:2: ( ( DIGIT )* '.' ( DIGIT )+ ( E )? | ( DIGIT )+ E )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			try
			{
				alt10 = dfa10.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:252:4: ( DIGIT )* '.' ( DIGIT )+ ( E )?
				{
				DebugLocation(252, 4);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:252:4: ( DIGIT )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if (((LA6_1>='0' && LA6_1<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
						{
						DebugLocation(252, 4);
						input.Consume();


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(252, 11);
				Match('.'); 
				DebugLocation(252, 15);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:252:15: ( DIGIT )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if (((LA7_1>='0' && LA7_1<='9')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
						{
						DebugLocation(252, 15);
						input.Consume();


						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(252, 22);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:252:22: ( E )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1=='E'||LA8_1=='e'))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:252:22: E
					{
					DebugLocation(252, 22);
					mE(); 

					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:253:4: ( DIGIT )+ E
				{
				DebugLocation(253, 4);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:253:4: ( DIGIT )+
				int cnt9=0;
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if (((LA9_1>='0' && LA9_1<='9')))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
						{
						DebugLocation(253, 4);
						input.Consume();


						}
						break;

					default:
						if (cnt9 >= 1)
							goto loop9;

						EarlyExitException eee9 = new EarlyExitException( 9, input );
						DebugRecognitionException(eee9);
						throw eee9;
					}
					cnt9++;
				}
				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(253, 11);
				mE(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 35);
			LeaveRule("FLOAT", 35);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 36);
		TraceIn("STRING", 36);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:257:6: ( '\\'' ( EscapeSequence | ( options {greedy=false; } :~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\'' ) ) )* '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:257:10: '\\'' ( EscapeSequence | ( options {greedy=false; } :~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\'' ) ) )* '\\''
			{
			DebugLocation(257, 10);
			Match('\''); 
			DebugLocation(257, 15);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:257:15: ( EscapeSequence | ( options {greedy=false; } :~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\'' ) ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=3;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1=='\\'))
				{
					alt11 = 1;
				}
				else if (((LA11_1>=' ' && LA11_1<='&')||(LA11_1>='(' && LA11_1<='[')||(LA11_1>=']' && LA11_1<='\uFFFF')))
				{
					alt11 = 2;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:257:17: EscapeSequence
					{
					DebugLocation(257, 17);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:257:34: ( options {greedy=false; } :~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\'' ) )
					{
					DebugLocation(257, 34);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:257:34: ( options {greedy=false; } :~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\'' ) )
					DebugEnterAlt(1);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:257:61: ~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\'' )
					{
					DebugLocation(257, 61);
					input.Consume();


					}


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(257, 103);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 36);
			LeaveRule("STRING", 36);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_NAME();
	partial void LeaveRule_NAME();

	// $ANTLR start "NAME"
	[GrammarRule("NAME")]
	private void mNAME()
	{
		EnterRule_NAME();
		EnterRule("NAME", 37);
		TraceIn("NAME", 37);
		try
		{
			int _type = NAME;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:260:6: ( '[' ( options {greedy=false; } : (~ ( ']' ) )* ) ']' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:260:9: '[' ( options {greedy=false; } : (~ ( ']' ) )* ) ']'
			{
			DebugLocation(260, 9);
			Match('['); 
			DebugLocation(260, 13);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:260:13: ( options {greedy=false; } : (~ ( ']' ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:260:40: (~ ( ']' ) )*
			{
			DebugLocation(260, 40);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:260:40: (~ ( ']' ) )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if (((LA12_1>='\u0000' && LA12_1<='\\')||(LA12_1>='^' && LA12_1<='\uFFFF')))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
					{
					DebugLocation(260, 40);
					input.Consume();


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			DebugLocation(260, 49);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAME", 37);
			LeaveRule("NAME", 37);
			LeaveRule_NAME();
		}
	}
	// $ANTLR end "NAME"

	partial void EnterRule_E();
	partial void LeaveRule_E();

	// $ANTLR start "E"
	[GrammarRule("E")]
	private void mE()
	{
		EnterRule_E();
		EnterRule("E", 38);
		TraceIn("E", 38);
		try
		{
			int _type = E;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:263:3: ( ( 'E' | 'e' ) ( '+' | '-' )? ( DIGIT )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:263:5: ( 'E' | 'e' ) ( '+' | '-' )? ( DIGIT )+
			{
			DebugLocation(263, 5);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(263, 15);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:263:15: ( '+' | '-' )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1=='+'||LA13_1=='-'))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
				{
				DebugLocation(263, 15);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(263, 26);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:263:26: ( DIGIT )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if (((LA14_1>='0' && LA14_1<='9')))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
					{
					DebugLocation(263, 26);
					input.Consume();


					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("E", 38);
			LeaveRule("E", 38);
			LeaveRule_E();
		}
	}
	// $ANTLR end "E"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 39);
		TraceIn("LETTER", 39);
		try
		{
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:267:2: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '#' | '{' | '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
			{
			DebugLocation(267, 2);
			if (input.LA(1)=='#'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='{')||input.LA(1)=='}')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 39);
			LeaveRule("LETTER", 39);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 40);
		TraceIn("DIGIT", 40);
		try
		{
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:276:2: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
			{
			DebugLocation(276, 2);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 40);
			LeaveRule("DIGIT", 40);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 41);
		TraceIn("EscapeSequence", 41);
		try
		{
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:280:2: ( '\\\\' ( 'n' | 'r' | 't' | '\\'' | '\\\\' | UnicodeEscape ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:280:4: '\\\\' ( 'n' | 'r' | 't' | '\\'' | '\\\\' | UnicodeEscape )
			{
			DebugLocation(280, 4);
			Match('\\'); 
			DebugLocation(281, 4);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:281:4: ( 'n' | 'r' | 't' | '\\'' | '\\\\' | UnicodeEscape )
			int alt15=6;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case 'n':
				{
				alt15 = 1;
				}
				break;
			case 'r':
				{
				alt15 = 2;
				}
				break;
			case 't':
				{
				alt15 = 3;
				}
				break;
			case '\'':
				{
				alt15 = 4;
				}
				break;
			case '\\':
				{
				alt15 = 5;
				}
				break;
			case 'u':
				{
				alt15 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:282:5: 'n'
				{
				DebugLocation(282, 5);
				Match('n'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:283:4: 'r'
				{
				DebugLocation(283, 4);
				Match('r'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:284:4: 't'
				{
				DebugLocation(284, 4);
				Match('t'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:285:4: '\\''
				{
				DebugLocation(285, 4);
				Match('\''); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:286:4: '\\\\'
				{
				DebugLocation(286, 4);
				Match('\\'); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:287:4: UnicodeEscape
				{
				DebugLocation(287, 4);
				mUnicodeEscape(); 

				}
				break;

			}
			} finally { DebugExitSubRule(15); }


			}

		}
		finally
		{
			TraceOut("EscapeSequence", 41);
			LeaveRule("EscapeSequence", 41);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_HexDigit();
	partial void LeaveRule_HexDigit();

	// $ANTLR start "HexDigit"
	[GrammarRule("HexDigit")]
	private void mHexDigit()
	{
		EnterRule_HexDigit();
		EnterRule("HexDigit", 42);
		TraceIn("HexDigit", 42);
		try
		{
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:292:2: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:
			{
			DebugLocation(292, 2);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HexDigit", 42);
			LeaveRule("HexDigit", 42);
			LeaveRule_HexDigit();
		}
	}
	// $ANTLR end "HexDigit"

	partial void EnterRule_UnicodeEscape();
	partial void LeaveRule_UnicodeEscape();

	// $ANTLR start "UnicodeEscape"
	[GrammarRule("UnicodeEscape")]
	private void mUnicodeEscape()
	{
		EnterRule_UnicodeEscape();
		EnterRule("UnicodeEscape", 43);
		TraceIn("UnicodeEscape", 43);
		try
		{
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:296:6: ( 'u' HexDigit HexDigit HexDigit HexDigit )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:296:12: 'u' HexDigit HexDigit HexDigit HexDigit
			{
			DebugLocation(296, 12);
			Match('u'); 
			DebugLocation(296, 16);
			mHexDigit(); 
			DebugLocation(296, 25);
			mHexDigit(); 
			DebugLocation(296, 34);
			mHexDigit(); 
			DebugLocation(296, 43);
			mHexDigit(); 

			}

		}
		finally
		{
			TraceOut("UnicodeEscape", 43);
			LeaveRule("UnicodeEscape", 43);
			LeaveRule_UnicodeEscape();
		}
	}
	// $ANTLR end "UnicodeEscape"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 44);
		TraceIn("WS", 44);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:300:4: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:300:7: ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' )
			{
			DebugLocation(300, 7);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||(input.LA(1)>='\f' && input.LA(1)<='\r')||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(300, 37);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 44);
			LeaveRule("WS", 44);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:8: ( T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | TRUE | FALSE | ID | INTEGER | FLOAT | STRING | NAME | E | WS )
		int alt16=39;
		try { DebugEnterDecision(16, false);
		try
		{
			alt16 = dfa16.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(16); }
		switch (alt16)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:10: T__18
			{
			DebugLocation(1, 10);
			mT__18(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:16: T__19
			{
			DebugLocation(1, 16);
			mT__19(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:22: T__20
			{
			DebugLocation(1, 22);
			mT__20(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:28: T__21
			{
			DebugLocation(1, 28);
			mT__21(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:34: T__22
			{
			DebugLocation(1, 34);
			mT__22(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:40: T__23
			{
			DebugLocation(1, 40);
			mT__23(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:46: T__24
			{
			DebugLocation(1, 46);
			mT__24(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:52: T__25
			{
			DebugLocation(1, 52);
			mT__25(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:58: T__26
			{
			DebugLocation(1, 58);
			mT__26(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:64: T__27
			{
			DebugLocation(1, 64);
			mT__27(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:70: T__28
			{
			DebugLocation(1, 70);
			mT__28(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:76: T__29
			{
			DebugLocation(1, 76);
			mT__29(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:82: T__30
			{
			DebugLocation(1, 82);
			mT__30(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:88: T__31
			{
			DebugLocation(1, 88);
			mT__31(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:94: T__32
			{
			DebugLocation(1, 94);
			mT__32(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:100: T__33
			{
			DebugLocation(1, 100);
			mT__33(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:106: T__34
			{
			DebugLocation(1, 106);
			mT__34(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:112: T__35
			{
			DebugLocation(1, 112);
			mT__35(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:118: T__36
			{
			DebugLocation(1, 118);
			mT__36(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:124: T__37
			{
			DebugLocation(1, 124);
			mT__37(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:130: T__38
			{
			DebugLocation(1, 130);
			mT__38(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:136: T__39
			{
			DebugLocation(1, 136);
			mT__39(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:142: T__40
			{
			DebugLocation(1, 142);
			mT__40(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:148: T__41
			{
			DebugLocation(1, 148);
			mT__41(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:154: T__42
			{
			DebugLocation(1, 154);
			mT__42(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:160: T__43
			{
			DebugLocation(1, 160);
			mT__43(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:166: T__44
			{
			DebugLocation(1, 166);
			mT__44(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:172: T__45
			{
			DebugLocation(1, 172);
			mT__45(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:178: T__46
			{
			DebugLocation(1, 178);
			mT__46(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:184: T__47
			{
			DebugLocation(1, 184);
			mT__47(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:190: TRUE
			{
			DebugLocation(1, 190);
			mTRUE(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:195: FALSE
			{
			DebugLocation(1, 195);
			mFALSE(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:201: ID
			{
			DebugLocation(1, 201);
			mID(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:204: INTEGER
			{
			DebugLocation(1, 204);
			mINTEGER(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:212: FLOAT
			{
			DebugLocation(1, 212);
			mFLOAT(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:218: STRING
			{
			DebugLocation(1, 218);
			mSTRING(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:225: NAME
			{
			DebugLocation(1, 225);
			mNAME(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:230: E
			{
			DebugLocation(1, 230);
			mE(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\Alejandro\\OneDrive\\My Code\\New-Updated Code\\new grammar\\NCalc.g:1:232: WS
			{
			DebugLocation(1, 232);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA10 dfa10;
	DFA16 dfa16;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10(this);
		dfa16 = new DFA16(this);
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x4\xFFFF";
		private const string DFA10_eofS =
			"\x4\xFFFF";
		private const string DFA10_minS =
			"\x2\x2E\x2\xFFFF";
		private const string DFA10_maxS =
			"\x1\x39\x1\x65\x2\xFFFF";
		private const string DFA10_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA10_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x2\x1\xFFFF\xA\x1\xB\xFFFF\x1\x3\x1F\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "251:1: FLOAT : ( ( DIGIT )* '.' ( DIGIT )+ ( E )? | ( DIGIT )+ E );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA16 : DFA
	{
		private const string DFA16_eotS =
			"\x1\xFFFF\x1\x20\x1\xFFFF\x1\x22\x8\xFFFF\x1\x26\x1\x28\x1\x2B\x2\xFFFF"+
			"\x3\x1D\x1\x30\x1\xFFFF\x2\x1D\x1\x34\x1\x1D\x12\xFFFF\x2\x1D\x1\x39"+
			"\x2\xFFFF\x3\x1D\x1\xFFFF\x1\x1D\x1\xFFFF\x1\x3D\x1\x3E\x1\xFFFF\x3\x1D"+
			"\x2\xFFFF\x1\x41\x1\x1D\x1\xFFFF\x1\x43\x1\xFFFF";
		private const string DFA16_eofS =
			"\x44\xFFFF";
		private const string DFA16_minS =
			"\x1\x9\x1\x3D\x1\xFFFF\x1\x26\x8\xFFFF\x1\x3C\x2\x3D\x2\xFFFF\x1\x6E"+
			"\x1\x6F\x1\x72\x1\x7C\x1\xFFFF\x1\x72\x1\x61\x1\x23\x1\x2B\x12\xFFFF"+
			"\x1\x64\x1\x74\x1\x20\x2\xFFFF\x1\x75\x1\x6C\x1\x2B\x1\xFFFF\x1\x30\x1"+
			"\xFFFF\x2\x20\x1\xFFFF\x1\x65\x1\x73\x1\x30\x2\xFFFF\x1\x20\x1\x65\x1"+
			"\xFFFF\x1\x20\x1\xFFFF";
		private const string DFA16_maxS =
			"\x1\x7E\x1\x3D\x1\xFFFF\x1\x26\x8\xFFFF\x1\x3E\x1\x3D\x1\x3E\x2\xFFFF"+
			"\x1\x6E\x1\x6F\x1\x72\x1\x7C\x1\xFFFF\x1\x72\x1\x61\x1\x7D\x1\x39\x12"+
			"\xFFFF\x1\x64\x1\x74\x1\x7D\x2\xFFFF\x1\x75\x1\x6C\x1\x39\x1\xFFFF\x1"+
			"\x39\x1\xFFFF\x2\x7D\x1\xFFFF\x1\x65\x1\x73\x1\x39\x2\xFFFF\x1\x7D\x1"+
			"\x65\x1\xFFFF\x1\x7D\x1\xFFFF";
		private const string DFA16_acceptS =
			"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1"+
			"\xD\x3\xFFFF\x1\x17\x1\x18\x4\xFFFF\x1\x1E\x4\xFFFF\x1\x23\x1\x24\x1"+
			"\x25\x1\x21\x1\x27\x1\x2\x1\x1\x1\x4\x1\x5\x1\xF\x1\x10\x1\x11\x1\xE"+
			"\x1\x13\x1\x12\x1\x15\x1\x16\x1\x14\x3\xFFFF\x1\x1D\x1\x1C\x3\xFFFF\x1"+
			"\x22\x1\xFFFF\x1\x26\x2\xFFFF\x1\x1B\x3\xFFFF\x1\x19\x1\x1A\x2\xFFFF"+
			"\x1\x1F\x1\xFFFF\x1\x20";
		private const string DFA16_specialS =
			"\x44\xFFFF}>";
		private static readonly string[] DFA16_transitionS =
			{
				"\x2\x1E\x1\xFFFF\x2\x1E\x12\xFFFF\x1\x1E\x1\x1\x1\xFFFF\x1\x1D\x1\xFFFF"+
				"\x1\x2\x1\x3\x1\x1B\x1\x4\x1\x5\x1\x6\x1\x7\x1\xFFFF\x1\x8\x1\x1A\x1"+
				"\x9\xA\x18\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\xFFFF\x4\x1D\x1\x19"+
				"\x15\x1D\x1\x1C\x2\xFFFF\x1\x10\x1\x1D\x1\xFFFF\x1\x11\x3\x1D\x1\x19"+
				"\x1\x17\x7\x1D\x1\x12\x1\x13\x4\x1D\x1\x16\x7\x1D\x1\x14\x1\x1D\x1\x15",
				"\x1\x1F",
				"",
				"\x1\x21",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x23\x1\x24\x1\x25",
				"\x1\x27",
				"\x1\x29\x1\x2A",
				"",
				"",
				"\x1\x2C",
				"\x1\x2D",
				"\x1\x2E",
				"\x1\x2F",
				"",
				"\x1\x31",
				"\x1\x32",
				"\x1\x1D\xA\xFFFF\x1\x1A\x1\xFFFF\xA\x18\x7\xFFFF\x4\x1D\x1\x33\x15"+
				"\x1D\x4\xFFFF\x1\x1D\x1\xFFFF\x4\x1D\x1\x33\x16\x1D\x1\xFFFF\x1\x1D",
				"\x1\x36\x1\xFFFF\x1\x36\x2\xFFFF\xA\x35",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x37",
				"\x1\x38",
				"\x1\x1D\x2\xFFFF\x1\x1D\x8\xFFFF\x1\x1D\x1\xFFFF\x1\x1D\x1\xFFFF\xA"+
				"\x1D\x7\xFFFF\x1A\x1D\x1\xFFFF\x1\x1D\x2\xFFFF\x1\x1D\x1\xFFFF\x1B\x1D"+
				"\x1\xFFFF\x1\x1D",
				"",
				"",
				"\x1\x3A",
				"\x1\x3B",
				"\x1\x1A\x1\xFFFF\x1\x1A\x2\xFFFF\xA\x3C",
				"",
				"\xA\x35",
				"",
				"\x1\x1D\x2\xFFFF\x1\x1D\x8\xFFFF\x1\x1D\x1\xFFFF\x1\x1D\x1\xFFFF\xA"+
				"\x1D\x7\xFFFF\x1A\x1D\x1\xFFFF\x1\x1D\x2\xFFFF\x1\x1D\x1\xFFFF\x1B\x1D"+
				"\x1\xFFFF\x1\x1D",
				"\x1\x1D\x2\xFFFF\x1\x1D\x8\xFFFF\x1\x1D\x1\xFFFF\x1\x1D\x1\xFFFF\xA"+
				"\x1D\x7\xFFFF\x1A\x1D\x1\xFFFF\x1\x1D\x2\xFFFF\x1\x1D\x1\xFFFF\x1B\x1D"+
				"\x1\xFFFF\x1\x1D",
				"",
				"\x1\x3F",
				"\x1\x40",
				"\xA\x3C",
				"",
				"",
				"\x1\x1D\x2\xFFFF\x1\x1D\x8\xFFFF\x1\x1D\x1\xFFFF\x1\x1D\x1\xFFFF\xA"+
				"\x1D\x7\xFFFF\x1A\x1D\x1\xFFFF\x1\x1D\x2\xFFFF\x1\x1D\x1\xFFFF\x1B\x1D"+
				"\x1\xFFFF\x1\x1D",
				"\x1\x42",
				"",
				"\x1\x1D\x2\xFFFF\x1\x1D\x8\xFFFF\x1\x1D\x1\xFFFF\x1\x1D\x1\xFFFF\xA"+
				"\x1D\x7\xFFFF\x1A\x1D\x1\xFFFF\x1\x1D\x2\xFFFF\x1\x1D\x1\xFFFF\x1B\x1D"+
				"\x1\xFFFF\x1\x1D",
				""
			};

		private static readonly short[] DFA16_eot = DFA.UnpackEncodedString(DFA16_eotS);
		private static readonly short[] DFA16_eof = DFA.UnpackEncodedString(DFA16_eofS);
		private static readonly char[] DFA16_min = DFA.UnpackEncodedStringToUnsignedChars(DFA16_minS);
		private static readonly char[] DFA16_max = DFA.UnpackEncodedStringToUnsignedChars(DFA16_maxS);
		private static readonly short[] DFA16_accept = DFA.UnpackEncodedString(DFA16_acceptS);
		private static readonly short[] DFA16_special = DFA.UnpackEncodedString(DFA16_specialS);
		private static readonly short[][] DFA16_transition;

		static DFA16()
		{
			int numStates = DFA16_transitionS.Length;
			DFA16_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA16_transition[i] = DFA.UnpackEncodedString(DFA16_transitionS[i]);
			}
		}

		public DFA16( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 16;
			this.eot = DFA16_eot;
			this.eof = DFA16_eof;
			this.min = DFA16_min;
			this.max = DFA16_max;
			this.accept = DFA16_accept;
			this.special = DFA16_special;
			this.transition = DFA16_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | TRUE | FALSE | ID | INTEGER | FLOAT | STRING | NAME | E | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}
